<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tegola - Vector tile server (MVT)</title>
    <link>http://tegola.io/</link>
    <description>Recent content on Tegola - Vector tile server (MVT)</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Aug 2016 00:11:02 +0100</lastBuildDate>
    <atom:link href="http://tegola.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Welcome to Tegola</title>
      <link>http://tegola.io/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/</guid>
      <description>

&lt;p&gt;Tegola is a high performance Mapbox Vector Tile server written in &lt;a href=&#34;https://golang.org&#34;&gt;Go&lt;/a&gt;. In a nutshell, Tegola takes geospatial data and slices it into vector tiles that can be efficiently delivered to any client. Tegola is creating and serving the vector tiles in the following map of Bonn, Germany:&lt;/p&gt;

&lt;iframe src=&#34;http://tegola.cfapps.io/&#34; style=&#34;margin-top:20px;width:100%;height:300px;&#34;&gt;&lt;/iframe&gt;





&lt;h3 id=&#34;tegola-is&#34;&gt;Tegola is:&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simple to setup.&lt;/strong&gt; All you need is the Tegola binary and a config file.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Extensible.&lt;/strong&gt; Tegola is designed to support multiple data providers. Currently supports PostGIS.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Open source.&lt;/strong&gt; Tegola is open to collaborators - and with an MIT license, it&amp;rsquo;s available for anyone to use!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Written in Go.&lt;/strong&gt; Go allows Tegola to be highly concurrent, lightweight and easy to deploy.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;MIT Licensed.&lt;/strong&gt; Tegola comes with the very liberal MIT license.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Getting started</title>
      <link>http://tegola.io/getting-started/</link>
      <pubDate>Wed, 09 Mar 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/getting-started/</guid>
      <description>

&lt;h2 id=&#34;1-download-tegola&#34;&gt;1. Download Tegola&lt;/h2&gt;

&lt;p&gt;Download the &lt;a href=&#34;https://github.com/terranodo/tegola/releases&#34;&gt;latest version&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Choose the binary that matches the operating system Tegola will run on. Quick links are available below for your convenience:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terranodo/tegola/releases/download/v0.2.0/tegola_darwin_amd64&#34;&gt;OSX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terranodo/tegola/releases/download/v0.2.0/tegola_windows_amd64.exe&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/terranodo/tegola/releases/download/v0.2.0/tegola_linux_amd64&#34;&gt;Linux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Find the Tegola file that was downloaded and move it into a fresh directory.&lt;/p&gt;

&lt;h2 id=&#34;2-get-a-data-provider&#34;&gt;2. Get a data provider&lt;/h2&gt;

&lt;p&gt;Tegola needs geospatial data to run. Currently, Tegola supports PostGIS which is a geospatial extension for PostgreSQL. If you don&amp;rsquo;t have PostGIS installed, &lt;a href=&#34;http://postgis.net/install/&#34;&gt;download PostGIS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Next, you&amp;rsquo;ll need to load your data provider with data. For your convenience you can download &lt;a href=&#34;https://s3-us-west-2.amazonaws.com/tegola/bonn_osm.sql.tgz&#34;&gt;PostGIS data for Bonn, Germany&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll need to create a new database (named &amp;ldquo;bonn&amp;rdquo;) and use a restore command to import the unzipped sql file into the database. Documentation can be found &lt;a href=&#34;https://www.postgresql.org/docs/current/static/backup.html&#34;&gt;here&lt;/a&gt; under the section titled &amp;ldquo;Restoring the dump&amp;rdquo;. The command should look something like &lt;code&gt;psql bonn &amp;lt; bonn_osm.sql&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;3-create-a-configuration-file&#34;&gt;3. Create a configuration file&lt;/h2&gt;

&lt;p&gt;Tegola utilizes a single configuration file to coordinate with data provider(s). This configuration file is written in &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Create your configuration file in the same directory as the Tegola binary and name it &lt;code&gt;config.toml&lt;/code&gt;. Next, copy and paste the following into this file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[webserver]
port = &amp;quot;:8080&amp;quot;

# register data providers
[[providers]]
name = &amp;quot;bonn&amp;quot;           # provider name is referenced from map layers
type = &amp;quot;postgis&amp;quot;        # the type of data provider. currently only supports postgis
host = &amp;quot;localhost&amp;quot;      # postgis database host
port = 5432             # postgis database port
database = &amp;quot;bonn&amp;quot;       # postgis database name
user = &amp;quot;tegola&amp;quot;         # postgis database user
password = &amp;quot;&amp;quot;           # postgis database password
srid = 3857             # The default srid for this provider. If not provided it will be WebMercator (3857)

[[providers.layers]]
  name = &amp;quot;road&amp;quot;
  geometry_fieldname = &amp;quot;wkb_geometry&amp;quot;
  id_fieldname = &amp;quot;ogc_fid&amp;quot;
  sql = &amp;quot;SELECT ST_AsBinary(wkb_geometry) AS wkb_geometry, name, ogc_fid FROM all_roads_3857 WHERE wkb_geometry &amp;amp;&amp;amp; !BBOX!&amp;quot;

  [[providers.layers]]
  name = &amp;quot;main_roads&amp;quot;
  geometry_fieldname = &amp;quot;wkb_geometry&amp;quot;
  id_fieldname = &amp;quot;ogc_fid&amp;quot;
  sql = &amp;quot;SELECT ST_AsBinary(wkb_geometry) AS wkb_geometry, name, ogc_fid FROM main_roads_3857 WHERE wkb_geometry &amp;amp;&amp;amp; !BBOX!&amp;quot;

  [[providers.layers]]
  name = &amp;quot;lakes&amp;quot;
  geometry_fieldname = &amp;quot;wkb_geometry&amp;quot;
  id_fieldname = &amp;quot;ogc_fid&amp;quot;
  sql = &amp;quot;SELECT ST_AsBinary(wkb_geometry) AS wkb_geometry, name, ogc_fid FROM lakes_3857 WHERE wkb_geometry &amp;amp;&amp;amp; !BBOX!&amp;quot;

[[maps]]
name = &amp;quot;zoning&amp;quot;

  [[maps.layers]]
  provider_layer = &amp;quot;bonn.road&amp;quot;
  min_zoom = 10
  max_zoom = 20

  [[maps.layers]]
  provider_layer = &amp;quot;bonn.main_roads&amp;quot;
  min_zoom = 5
  max_zoom = 20

  [[maps.layers]]
  provider_layer = &amp;quot;bonn.lakes&amp;quot;
  min_zoom = 5
  max_zoom = 20
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: This configuration file is specific to the Bonn data provided in step 2. If you&amp;rsquo;re using another dataset reference the &lt;a href=&#34;http://tegola.io/configuration&#34;&gt;Configuration Documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;4-start-tegola&#34;&gt;4. Start Tegola&lt;/h2&gt;

&lt;p&gt;Navigate to the Tegola directory in your computer&amp;rsquo;s terminal and run this command:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./tegola --config=config.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should see a message confirming the config file load and Tegola being started on port 8080. If your computer&amp;rsquo;s port 8080 is being used by another process, change the port in the config file to an open port.&lt;/p&gt;

&lt;h2 id=&#34;5-create-an-html-page&#34;&gt;5. Create an HTML page&lt;/h2&gt;

&lt;p&gt;Tegola delivers geospatial vector tile data to any requesting client. For simplicity, we&amp;rsquo;ll be setting up a basic HTML page as our client that will display the rendered map. We&amp;rsquo;ll be using the &lt;a href=&#34;http://openlayers.org/&#34;&gt;Open Layers&lt;/a&gt; client side library to display and style the vector tile content.&lt;/p&gt;

&lt;p&gt;Create a new HTML file, copy in the contents below, and open in a browser:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
  &amp;lt;head&amp;gt;
    &amp;lt;title&amp;gt;Tegola Sample&amp;lt;/title&amp;gt;
    &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;http://openlayers.org/en/v3.16.0/css/ol.css&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;
    &amp;lt;script src=&amp;quot;http://openlayers.org/en/v3.16.0/build/ol.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;style&amp;gt;
      #map {
        width: 100%;
        height: 100%;
        position: absolute;
        background: #f8f4f0;
      }
    &amp;lt;/style&amp;gt;
  &amp;lt;/head&amp;gt;
  &amp;lt;body&amp;gt;
    &amp;lt;div id=&amp;quot;map&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
    &amp;lt;script&amp;gt;
      var map = new ol.Map({
        layers: [
          new ol.layer.VectorTile({
            source: new ol.source.VectorTile({
              attributions: &#39;© &amp;lt;a href=&amp;quot;https://www.mapbox.com/map-feedback/&amp;quot;&amp;gt;Mapbox&amp;lt;/a&amp;gt; &#39; +
              &#39;© &amp;lt;a href=&amp;quot;http://www.openstreetmap.org/copyright&amp;quot;&amp;gt;&#39; +
              &#39;OpenStreetMap contributors&amp;lt;/a&amp;gt;&#39;,
              format: new ol.format.MVT(),
              tileGrid: ol.tilegrid.createXYZ({maxZoom: 22}),
              tilePixelRatio: 16,
              url:&#39;/maps/zoning/{z}/{x}/{y}.vector.pbf?debug=true&#39;
            })
          })
        ],
        target: &#39;map&#39;,
        view: new ol.View({
          center: [790793.4954921771, 6574927.869849075], //coordinates the map will center on initially
          zoom: 14
        })
      });
    &amp;lt;/script&amp;gt;
  &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If everything was successful, you should see a map of Bonn in your browser.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://tegola.io/images/bonn.png&#34; alt=&#34;Bonn, Germany&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Configuration</title>
      <link>http://tegola.io/configuration/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/configuration/</guid>
      <description>

&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;

&lt;p&gt;The Tegola config file use &lt;a href=&#34;https://github.com/toml-lang/toml&#34;&gt;TOML&lt;/a&gt; syntax and is comprised of three primary sections:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#webserver&#34;&gt;Webserver&lt;/a&gt;: webserver configuration.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#providers&#34;&gt;Providers&lt;/a&gt;: data provider configuration (i.e. PostGIS).&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#maps&#34;&gt;Maps&lt;/a&gt;: map configuration including map names, layers and zoom levels.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;webserver&#34;&gt;Webserver&lt;/h2&gt;

&lt;p&gt;The webserver part of the config has the following parameters:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;:8080&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;A string with the value for port.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;log_file&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Location of a log file to write webserver logs to.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;log_format&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;{{.Time}}:{{.RequestIP}} —— Tile:{{.Z}}/{{.X}}/{{.Y}}&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Log output format. The Default format can be rearranged as desired.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;example-webserver-config&#34;&gt;Example Webserver config&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[webserver]
port = &amp;quot;:8080&amp;quot;
log_file = &amp;quot;/var/log/tegola/tegola.log&amp;quot;
log_format = &amp;quot;{{.Time}}:{{.RequestIP}} —— Tile:{{.Z}}/{{.X}}/{{.Y}}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;providers&#34;&gt;Providers&lt;/h2&gt;

&lt;p&gt;The providers configuration tells Tegola where your data lives. Currently Tegola supports PostGIS as a data provider, but it&amp;rsquo;s positioned to support additional data providers. Data providers each have their own specific configuration, but all are required to have the following two config params:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;User defined data provider name. This is used by map layers to reference the data provider.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;type&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The type of data provider. (i.e. &amp;ldquo;postgis&amp;rdquo;)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;postgis&#34;&gt;PostGIS&lt;/h3&gt;

&lt;p&gt;In addition to the required &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; parameters, a PostGIS data provider has the following additional params:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;host&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The database host.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;port&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;5432&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The port the database is listening on.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;database&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The name of the database&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;user&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The database user&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;password&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The database user&amp;rsquo;s password&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srid&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3857&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The default SRID for this data provider&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;example-postgis-provider-config&#34;&gt;Example PostGIS Provider config&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[providers]]
name = &amp;quot;test_postgis&amp;quot;   # provider name is referenced from map layers
type = &amp;quot;postgis&amp;quot;        # the type of data provider.
host = &amp;quot;localhost&amp;quot;      # postgis database host
port = 5432             # postgis database port
database = &amp;quot;tegola&amp;quot;     # postgis database name
user = &amp;quot;tegola&amp;quot;         # postgis database user
password = &amp;quot;&amp;quot;           # postgis database password
srid = 3857             # The default srid for this provider. If not provided it will be WebMercator (3857)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;provider-layers&#34;&gt;Provider Layers&lt;/h2&gt;

&lt;p&gt;Provider Layers are referenced by &lt;a href=&#34;#map-layers&#34;&gt;Map Layers&lt;/a&gt; using the dot syntax &lt;code&gt;provder_name.provider_layer_name&lt;/code&gt; (i.e. &lt;code&gt;my_postgis.rivers&lt;/code&gt;). Provider Layers are required to have a &lt;code&gt;name&lt;/code&gt; and will typically have additional parameters which are specific to that Provider. A Provider Layer has the following top level configuration parameters:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The name that will be referenced from a map layer.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&#34;postgis-provider-layer&#34;&gt;PostGIS Provider Layer&lt;/h3&gt;

&lt;p&gt;PostGIS Provider Layers define how Tegola will fetch data for a layer form a &lt;a href=&#34;#postgis&#34;&gt;PostGIS&lt;/a&gt; Provider. The configuration requires either &lt;code&gt;tablename&lt;/code&gt; or &lt;code&gt;sql&lt;/code&gt; to be defined, but not both. The PostGIS Provider Layer has the following configuration prarameters:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Default&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;tablename&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes*&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The name of the database table to query.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;sql&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes*&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Custom SQL. Requires a !BBOX! token&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;geometry_fieldname&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;geom&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The name of the geometry field in the table&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;id_fieldname&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;gid&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The name of the feature ID field in the table&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;srid&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;3857&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The SRID for the table. Can be 3857 of 4326.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;fields&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;Fields to include as tag values. Useful when using &lt;strong&gt;tablename&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&amp;#42; Either &lt;code&gt;tablename&lt;/code&gt; or &lt;code&gt;sql&lt;/code&gt; is required, but not both.&lt;/p&gt;

&lt;h4 id=&#34;example-postgis-provider-layer-with-tablename-defined&#34;&gt;Example PostGIS Provider Layer with &lt;code&gt;tablename&lt;/code&gt; defined&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[providers.layers]]
name = &amp;quot;landuse&amp;quot;                    # will be encoded as the layer name in the tile
tablename = &amp;quot;gis.zoning_base_3857&amp;quot;  # sql or table_name are required
geometry_fieldname = &amp;quot;geom&amp;quot;         # geom field. default is geom
id_fieldname = &amp;quot;gid&amp;quot;                # geom id field. default is gid
srid = 4326                         # the srid of table&#39;s geo data.
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;example-postgis-provider-layer-with-sql-defined-notice-the-use-of-of-the-bbox-token-in-the-sql-statement&#34;&gt;Example PostGIS Provider Layer with &lt;code&gt;sql&lt;/code&gt; defined. Notice the use of of the &lt;code&gt;!BBOX!&lt;/code&gt; token in the SQL statement:&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[providers.layers]]
name = &amp;quot;landuse&amp;quot;                    # will be encoded as the layer name in the tile
# Custom sql to be used for this layer. 
# Note that the geometery field is wraped in ST_AsBinary()
# as Tegola is expecting Well Known Binary (WKB) format.
sql = &amp;quot;&amp;quot;&amp;quot;
	SELECT
		gid,
		ST_AsBinary(geom) AS geom
	FROM
		gis.rivers
	WHERE
		geom &amp;amp;&amp;amp; !BBOX!
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;maps&#34;&gt;Maps&lt;/h2&gt;

&lt;p&gt;Tegola is responsible for serving vector map tiles, which are made up of numerous &lt;a href=&#34;#map-layers&#34;&gt;Map Layers&lt;/a&gt;. The name of the Map is used in the URL of all map tile requests (i.e. /maps/:map_name/:z/:x/:y). Maps have the following configuration parameters:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;name&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The map that will be referenced in the URL (i.e. /maps/:map_name.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[maps]]
name = &amp;quot;zoning&amp;quot;		# used in the URL to reference this map (/maps/:map_name)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map-layers&#34;&gt;Map Layers&lt;/h2&gt;

&lt;p&gt;Map Layers define which &lt;a href=&#34;#provider-layers&#34;&gt;Provider Layers&lt;/a&gt; to render at what zoom levels. Map Layers have the following configuration parameters:&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Param&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Required&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;provider_layer&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The name of the provider and provider layer using dot syntax. (i.e. my_postgis.rivers).&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;min_zoom&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The minium zoom to render this layer at.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td&gt;max_zoom&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;No&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;The maximum zoom to render this layer at.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&#34;example-map-layer&#34;&gt;Example Map Layer&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[[maps.layers]]
provider_layer = &amp;quot;test_postgis.landuse&amp;quot; # must match a data provider layer
min_zoom = 12                       	# minimum zoom level to include this layer
max_zoom = 16                       	# maximum zoom level to include this layer
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;map-layer-default-tags&#34;&gt;Map Layer Default Tags&lt;/h2&gt;

&lt;p&gt;Map Layer Default Tags provide a convenient way to encode additional tags that are not supplied by a data provider. If a Defalt Tag is defined and the same tag is returned by the Provider, the Provider defined tage will take precedence.&lt;/p&gt;

&lt;p&gt;Default Tags are &lt;code&gt;key = value&lt;/code&gt; pairs.&lt;/p&gt;

&lt;h4 id=&#34;example-map-layer-default-tags&#34;&gt;Example Map Layer Default Tags&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[maps.layers.default_tags]      
class = &amp;quot;park&amp;quot;			# a default tag to encode into the feature
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;full-config-example&#34;&gt;Full Config Example&lt;/h2&gt;

&lt;p&gt;The following config demonstrates the various concepts discussed above:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[webserver]
port = &amp;quot;:9090&amp;quot;

# register data providers
[[providers]]
name = &amp;quot;test_postgis&amp;quot;   # provider name is referenced from map layers
type = &amp;quot;postgis&amp;quot;        # the type of data provider. currently only supports postgis
host = &amp;quot;localhost&amp;quot;      # postgis database host
port = 5432             # postgis database port
database = &amp;quot;tegola&amp;quot;     # postgis database name
user = &amp;quot;tegola&amp;quot;         # postgis database user
password = &amp;quot;&amp;quot;           # postgis database password
srid = 3857             # The default srid for this provider. If not provided it will be WebMercator (3857)

    # Example data
    [[providers.layers]]
    name = &amp;quot;landuse&amp;quot;                    # will be encoded as the layer name in the tile
    tablename = &amp;quot;gis.zoning_base_3857&amp;quot;  # sql or table_name are required
    geometry_fieldname = &amp;quot;geom&amp;quot;         # geom field. default is geom
    id_fieldname = &amp;quot;gid&amp;quot;                # geom id field. default is gid
    srid = 4326                         # the SRID of the geometry field if different than 

    [[providers.layers]]
    name = &amp;quot;roads&amp;quot;                      # will be encoded as the layer name in the tile
    tablename = &amp;quot;gis.zoning_base_3857&amp;quot;  # sql or table_name are required
    geometry_fieldname = &amp;quot;geom&amp;quot;         # geom field. default is geom
    id_fieldname = &amp;quot;gid&amp;quot;                # geom id field. default is gid
    fields = [ &amp;quot;class&amp;quot;, &amp;quot;name&amp;quot; ]        # Additional fields to include in the select statement.

    [[providers.layers]]
    name = &amp;quot;rivers&amp;quot;                     # will be encoded as the layer name in the tile
    # Custom sql to be used for this layer. 
    # Note that the geometery field is wraped in a ST_AsBinary()
    sql = &amp;quot;&amp;quot;&amp;quot;
        SELECT
            gid,
            ST_AsBinary(geom) AS geom
        FROM
            gis.rivers
        WHERE
            geom &amp;amp;&amp;amp; !BBOX!
    &amp;quot;&amp;quot;&amp;quot;

# maps are made up of layers
[[maps]]
name = &amp;quot;zoning&amp;quot;                             # used in the URL to reference this map (/maps/:map_name)

    [[maps.layers]]
    provider_layer = &amp;quot;test_postgis.landuse&amp;quot; # must match a data provider layer
    min_zoom = 12                           # minimum zoom level to include this layer
    max_zoom = 16                           # maximum zoom level to include this layer

        [maps.layers.default_tags]          # table of default tags to encode in the tile. SQL statements will override
        class = &amp;quot;park&amp;quot;

    [[maps.layers]]
    provider_layer = &amp;quot;test_postgis.rivers&amp;quot;  # must match a data provider layer
    min_zoom = 10                           # minimum zoom level to include this layer
    max_zoom = 18                           # maximum zoom level to include this layer
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Debugging</title>
      <link>http://tegola.io/debugging/</link>
      <pubDate>Tue, 30 Aug 2016 00:11:02 +0100</pubDate>
      
      <guid>http://tegola.io/debugging/</guid>
      <description>

&lt;h2 id=&#34;environment-variables&#34;&gt;Environment Variables&lt;/h2&gt;

&lt;p&gt;The following environment variables can be used for debugging the tegola server:&lt;/p&gt;

&lt;p&gt;SQL_DEBUG: specify the type of SQL debug information to output. Supports the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;LAYER_SQL&lt;/code&gt;: print layer SQL as they&amp;rsquo;re parsed from the config file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;EXCUTE_SQL&lt;/code&gt;: print SQL that is executed for each tile request and the number of items it returns or an error.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ SQL_DEBUG=LAYER_SQL tegola --config=/path/to/conf.toml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;client-side&#34;&gt;Client side&lt;/h2&gt;

&lt;p&gt;When debugging client side, it&amp;rsquo;s often helpful to to see an outline of a tile along with it&amp;rsquo;s Z/X/Y values. To encode a debug layer into every tile add the query string variable debug=true to the URL template being used to request tiles. For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://localhost:8080/maps/mymap/{z}/{x}/{y}.vector.pbf?debug=true
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The requested tile will be encoded with an additional layer with the name value set to debug and include two features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;debug_outline&lt;/code&gt;: a line feature that traces the border of the tile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug_text&lt;/code&gt;: a point feature in the middle of the tile with the following tags:&lt;/li&gt;
&lt;li&gt;&lt;code&gt;zxy&lt;/code&gt;: a string with the Z, X and Y values formatted as: Z:0, X:0, Y:0&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>